function batched_frule(xÌ‡_batch::Batch{0}, f, args...)
    return f(args...), Batch()
end

# Generic all args version
function batched_frule(xÌ‡s::Batch{N}, primal_args...) where N
    xÌ‡1 = first(xÌ‡s)
    y, yÌ‡1 = @inline frule(xÌ‡1, primal_args...)
    
    yÌ‡s = ntuple(N) do ii
        if ii == 1
            yÌ‡1
        else
            _, yÌ‡ii = @inline frule(xÌ‡s[ii], primal_args...)
            yÌ‡ii
        end
    end

    return y, Batch{N}(yÌ‡s)
end


function batched_frule(xÌ‡s::Batch{N}, incidence::Tuple, f, x...) where N
    length(incidence) == N || throw(DimensionMismatch("Must be one incidence element per batch element."))
    y = @inline f(x...)  # TODO: check in all cases we care about this actually optimizes out with the work inside the loop
    yÌ‡s = Batch(ntuple(N) do ii
        xÌ‡ = xÌ‡s[ii]
        ğŸ¥„ = incidence[ii]

        if ğŸ¥„ isa Number
            if iszero(ğŸ¥„)
                ZeroTangent()  # no work at all, "Sir Not-Appearing-In-This-Film"
            else
                ğŸ¥„  # It is some linear scaling
            end
        else
            # We don't know how to handle this kind of incidence, (It's probably NonLinear())
            _, yÌ‡ii = @inline frule(xÌ‡, f, x...)
            yÌ‡ii
        end
    end)
    return y, yÌ‡s
end
